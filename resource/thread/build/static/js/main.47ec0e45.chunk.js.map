{"version":3,"sources":["common/common.js","components/dataikuItem.js","App.js","serviceWorker.js","index.js"],"names":["Common","getIconForDataikuItemType","type","size","DataikuItem","props","state","this","renderDataset","Col","class","item","name","project","data","schema","columns","Header","accessor","defaultPageSize","pageSizeOptions","console","log","itemDetails","renderItemDetailsByType","Row","xs","style","paddingTop","Component","App","loadItem","length","fetch","window","getWebAppBackendUrl","key","method","headers","then","res","json","response","setState","selectedItem","selectedItemType","search","query","p_list","Object","keys","forEach","results","searchResults","dataiku","undefined","dataikuItem","isLoading","$","document","ready","rendered","option","marginLeft","marginRight","Container","filterBy","id","labelKey","minLength","onChange","onSearch","options","placeholder","renderMenuItemChildren","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47ec0e45.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { FaColumns, FaDatabase, FaList, FaProjectDiagram, FaQuestionCircle } from \"react-icons/fa\";\n\nfunction getIconForDataikuItemType(type, size = \"14px\") {\n    // console.log();\n    switch(type) {\n        case \"project\":\n            return <FaProjectDiagram size={size} />;\n        case \"dataset\":\n            return <FaDatabase size={size} />;\n        case \"column\":\n            return <FaColumns size={size} />;\n        case \"definition\":\n            return <FaList size={size} />;\n        default: \n            return <FaQuestionCircle size={size} />;\n    }   \n}\n\nconst Common = {\n    getIconForDataikuItemType\n};\n\nexport default Common;","import React, { Component } from \"react\";\nimport ReactTable from \"react-table\";  \nimport { Col, Container, Row } from \"react-bootstrap\";\nimport Common from \"../common/common\";\n\nclass DataikuItem extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \n        };\n    }\n\n    renderItemDetailsByType() {\n        switch(this.props.type) {\n            case 'dataset':\n                return this.renderDataset();\n            case 'project':\n                return this.renderDataset();\n            case 'dataset':\n                return <Col>\n                    <p>No rendering has been setup for this item.</p>\n                </Col>;\n        }\n    }\n\n    renderDataset() {\n        const columns = [{  \n            Header: 'Name',  \n            accessor: 'name'  \n        },{  \n            Header: 'Type',  \n            accessor: 'type'  \n        }] \n\n        // let tags;\n        // this.props.item.meta.tags.forEach(element => {\n        //     console.log('element == ');\n        //     console.log(element);\n        //     // tags[tags.length] = <span>{element}</span>;\n        // });\n        \n        return <Col>\n            <p class=\"name\"><b>Name: </b>{this.props.item.name}</p>\n            <p class=\"project\"><b>Project: </b>{this.props.item.project}</p>\n            \n            <div class=\"schema-content\">  \n                <p class=\"schema\"><b>Project: </b></p>\n                <ReactTable  \n                    data={this.props.item.schema}  \n                    columns={columns}  \n                    defaultPageSize = {2}  \n                    pageSizeOptions = {[2,4, 6]}  \n                />  \n            </div>    \n\n            {/* <div class=\"tags\">{tags}</div>   */}\n        </Col>;\n    }\n\n    renderProject() {\n        // const columns = [{  \n        //     Header: 'Name',  \n        //     accessor: 'name'  \n        // },{  \n        //     Header: 'Type',  \n        //     accessor: 'type'  \n        // }] \n\n        // let tags;\n        // this.props.meta.tags.forEach(element => {\n        //     tags[tags.length] = <span>{element}</span>;\n        // });\n        \n        return <Col>\n            <p class=\"name\"><b>Name: </b>{this.props.item.name}</p>\n            <p class=\"project\"><b>Project: </b>{this.props.item.project}</p>\n            \n            {/* <div class=\"schema-content\">  \n                <p class=\"schema\"><b>Project: </b></p>\n                <ReactTable  \n                    data={this.props.schema}  \n                    columns={columns}  \n                    defaultPageSize = {2}  \n                    pageSizeOptions = {[2,4, 6]}  \n                />  \n            </div>     */}\n\n            {/* <div class=\"tags\">{tags}</div>   */}\n        </Col>;\n    }\n\n    render() {\n        console.log('render() :: this.props == ');\n        console.log(this.props);\n\n        let item;\n        let itemDetails = this.renderItemDetailsByType();\n        if (this.props.item != null) {\n            // MOVE RENDER ITEMS HERE AND PUT ROW AS MAIN TAG FOR BUILDING IT.\n            item = <Row>\n                <Col xs={1}>\n                    {Common.getIconForDataikuItemType(this.props.type, \"100%\")}\n                </Col>\n                {itemDetails}                                          \n            </Row>\n        } else {\n            item = <Row>\n                <p>No Item to display...</p>\n            </Row>\n        }        \n\n        return (\n            <div class=\"dataiku-item\" style={{ paddingTop: '20px' }}>\n                {item}\n            </div>\n        );\n    }\n}\n\nexport default DataikuItem;","import React, { Fragment } from \"react\";\nimport { Component } from 'react';\nimport { useEffect } from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport {\n    Container,\n    Row\n} from 'react-bootstrap';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Routes,\n    Link\n} from \"react-router-dom\";\n\nimport Common from \"./common/common\";\nimport DataikuItem from \"./components/dataikuItem\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            dataiku: undefined,\n            dataikuItem: null,\n            isLoading: false,\n            selectedItem: null,\n            selectedItemType: null,\n            searchResults: [],\n        }\n    }\n\n    loadItem = (item) => {\n        console.log('loadItem :: item == ');\n        console.log(item);\n\n        if(item.length > 0) {\n            const requestOptions = {\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json' },\n            };\n    \n            fetch(window.getWebAppBackendUrl('load-item') + '?key=' + item[0].key, requestOptions)\n                .then(res => res.json())\n                .then((response) => {\n                    console.log('response == ');\n                    console.log(response);\n                    \n                    this.setState({\n                        selectedItem: response,\n                        selectedItemType: item[0].type    \n                    });\n                });\n        } \n        // else {\n        //     this.setState({\n        //         selectedItem: null      \n        //     });\n        // }\n    }\n\n    search = (query) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n        };\n\n        fetch(window.getWebAppBackendUrl('search') + '?term=' + query, requestOptions)\n            .then(res => res.json())\n            .then((response) => {\n                var p_list = [];\n                Object.keys(response).forEach(function (results) {\n                    p_list[p_list.length] = response[results];\n                });\n\n                this.setState({\n                    searchResults: p_list                                        \n                });\n            });\n    }\n\n    componentDidMount() {\n        window.$(document).ready(() => {\n            this.setState({ dataiku: window.dataiku });\n            this.setState({ rendered: true });\n\n            // eventBus.on(\"dataRefresh\", (data) =>\n            //     this.refreshData()\n            // );\n\n            // eventBus.on(\"datasetSelected\", (ds) =>\n            //     this.findDataset(ds)\n            // );\n\n            // this.search('thread');\n            // this.refreshData();\n        });\n    }\n\n    renderMenuItemChildren(option, props) {\n        return <Fragment>\n            {Common.getIconForDataikuItemType(option.type)}\n            <span style={{ marginLeft: '.5rem', marginRight: '.5rem' }}>Type: {option.type}; </span>\n            <span>Name: {option.name}; </span>                                \n        </Fragment>;\n    }\n\n    render() {\n        // <Router>\n        //     <main>\n        //       <nav>\n        //         <ul>\n        //           <li><Link to=\"/\">Home</Link></li>\n        //           <li><a href=\"/about\">About</a></li>\n        //           <li><a href=\"/contact\">Contact</a></li>\n        //         </ul>\n        //       </nav>\n\n        //         <Routes>\n        //             <Route path=\"/\" exact component={Home} />\n        //         </Routes>\n        //     </main>\n        // </Router>\n        \n        const { isLoading, searchResults, selectedItem, selectedItemType } = this.state;\n        // const ref = React.createRef();\n        const filterBy = () => true;\n\n        this.dataikuItem = <DataikuItem item={selectedItem} type={selectedItemType} />;\n\n        return (\n            <Container style={{ paddingTop: '20px' }}>\n                <Row>\n                    <AsyncTypeahead\n                        filterBy={filterBy}\n                        id=\"async-search\"\n                        isLoading={isLoading}\n                        labelKey=\"name\"\n                        minLength={3}\n                        onChange={this.loadItem}\n                        onSearch={this.search}\n                        options={searchResults}\n                        placeholder='Search for Datase'                        \n                        renderMenuItemChildren={this.renderMenuItemChildren}\n                    />                    \n                </Row>\n\n                {this.dataikuItem}\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  // <BrowserRouter>\n  //   <Route path=\"/\" element={<App />}>\n  //     <Route path=\"expenses\" element={<Expenses />} />\n  //     {/* <Route path=\"invoices\" element={<Invoices />} /> */}\n  //   </Route>\n  // </BrowserRouter>,\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}