{"version":3,"sources":["logo.svg","eventBus.js","components/customFlowNode.js","components/dataset.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","eventBus","on","event","callback","document","addEventListener","e","detail","dispatch","data","dispatchEvent","CustomEvent","remove","removeEventListener","memo","proj","ds","isConnectable","type","position","style","background","border","borderRadius","textAlign","padding","fontWeight","project","href","dataset","target","column","Dataset","props","traverse","lst","node","prop","ct","res","length","x","name","update","st","base_elem","elements","id","label","y","width","borderColor","borderWidth","sourcePosition","targetPosition","draggable","down_res","lineage_downstream","lineage_downstream_full","up_res","lineage_upstream","lineage_upstream_full","lbl","splits","split","col","edge","source","arrowHeadType","count","animated","new_state","setState","closeColumn","modalClosed","state","modalDialog","selectedCol","comment","col_elements","last_ds","showA","nodeTypes","customFlowNode","this","full_ds_name","lin","join","deets","cols","createColName","i","fetch","window","getWebAppBackendUrl","method","body","JSON","stringify","then","json","result","schema","columns","createDsLink2","projectKey","rv","fitView","listItems","map","onClick","openColumn","Modal","size","show","onHide","animation","Header","closeButton","Title","Body","Container","Row","height","onLoad","showInteractive","Form","paddingTop","Group","className","Label","Control","defaultValue","onChange","value","Text","Footer","Button","variant","saveColLineage","saveCol","createDsLink","versionTag","lastModifiedBy","login","lastModifiedOn","shortDesc","Toast","delay","autohide","src","alt","Tabs","defaultActiveKey","Tab","eventKey","title","def","Table","striped","bordered","hover","Component","App","handleClick","console","log","$","getJSON","output","text","append","findDataset","key","ds_name","refreshData","p_list","Object","keys","forEach","proj_name","datasets","isLoaded","project_list","full_tree","rendered","dataiku","undefined","selectedDataset","bind","ready","showDetail","ref","React","createRef","placeholder","selected","current","clear","options","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a866f709.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const eventBus = {\n    on(event, callback) {\n      document.addEventListener(event, (e) => callback(e.detail));\n    },\n    dispatch(event, data) {\n      document.dispatchEvent(new CustomEvent(event, { detail: data }));\n    },\n    remove(event, callback) {\n      document.removeEventListener(event, callback);\n    },\n  };\n  \n  export default eventBus;","import React, { memo } from 'react';\n\nimport { Handle } from 'react-flow-renderer';\n\nexport default memo(({ data, isConnectable }) => {\n\n  function createDsLink2(proj, ds) {\n    return '/projects/' + proj + '/datasets/' + ds + '/explore/';\n  }\n\n  return (\n    <>\n      <Handle\n        type=\"target\"\n        position=\"left\"\n        style={{ background: '#555' }}\n        isConnectable={isConnectable}\n      />\n      <div style={{ border: 'solid 1px #333', borderRadius: '3px', textAlign: 'center', padding: '10px' }}>\n        <div style={{ fontWeight: 'bold' }}>{data.project}</div>\n        <div><a href={createDsLink2(data.project, data.dataset)} target=\"_blank\">{data.dataset}</a></div>\n        <div>\n          {data.column}\n        </div>\n      </div>\n\n      <Handle\n        type=\"source\"\n        position=\"right\"\n        isConnectable={isConnectable}\n      />\n      {/* <Handle\n        type=\"source\"\n        position=\"right\"\n        id=\"b\"\n        style={{ bottom: 10, top: 'auto', background: '#555' }}\n        isConnectable={isConnectable}\n      /> */}\n    </>\n  );\n});","import React, { Component } from \"react\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Table from 'react-bootstrap/Table';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport { Modal, Button, Form, Toast } from \"react-bootstrap\";\nimport eventBus from \"../eventBus\";\nimport ReactFlow, { Controls } from 'react-flow-renderer';\nimport customFlowNode from './customFlowNode.js';\n\n// import EditColumnModal from \"./editColumnModal\";\n\nclass Dataset extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalDialog: false,\n            selectedCol: { name: '', comment: '' },\n            elements: [],\n            col_elements: [],\n            last_ds: '',\n            showA: false\n        };\n\n        // this.toggleModal = this.toggleModal.bind(this);\n        this.nodeTypes = {\n            customFlowNode: customFlowNode,\n        };\n    }\n\n    traverse = (lst, node, prop, ct = 0) => {\n        var res = [];\n        if (node[prop] != null && node[prop].length > 0) {\n            ct = ct + 1;\n            for (var x = 0; x < node[prop].length; x++) {\n                this.traverse(lst, node[prop][x], prop, ct);\n            }\n        }\n        else {\n            lst[lst.length] = {\n                'count': ct - 1,\n                'name': node.name\n            }\n        }\n\n        return res;\n    }\n\n\n    update = (st, base_elem) => {\n\n        var elements = [{\n            id: '-1',\n            // type: 'customFlowNode',\n            data: { label: base_elem.name },\n            position: { x: 250, y: 140 },\n            style: { width: '200px', borderColor: 'red', borderWidth: '2px', fontWeight: 'bold' },\n            sourcePosition: 'right',\n            targetPosition: 'left',\n            draggable: false\n        }];\n\n        // find all the end-nodes\n        var down_res = [];\n        if (base_elem.lineage_downstream != null) {\n            if (base_elem.lineage_downstream_full != null)\n                this.traverse(down_res, base_elem, 'lineage_downstream_full');\n            else\n                down_res = base_elem.lineage_downstream;\n        }\n\n        var up_res = [];\n        if (base_elem.lineage_upstream != null) {\n            if (base_elem.lineage_upstream_full != null)\n                this.traverse(up_res, base_elem, 'lineage_upstream_full');\n            else\n                up_res = base_elem.lineage_upstream;\n        }\n\n        for (var x = 0; x < down_res.length; x++) {\n            var lbl = down_res[x];\n            if (lbl.name != null)\n                lbl = down_res[x].name;\n\n            var splits = lbl.split('.');\n            var project = splits[0];\n            var dataset = '';\n            var col = '';\n            if (splits.length > 1)\n                dataset = splits[1];\n            if (splits.length > 2)\n                col = splits[2];\n\n            elements[elements.length] = {\n                id: 'down_' + x,\n                type: 'customFlowNode',\n                data: { project: project, dataset: dataset, column: col },\n                style: { width: '200px' },\n                targetPosition: 'left',\n                sourcePosition: 'right',\n                position: { x: 500, y: ((300 / (down_res.length + 1)) * (x + 1)) },\n                draggable: false\n            }\n\n            var edge = { id: '-1-down_' + x, source: '-1', target: 'down_' + x, arrowHeadType: 'arrow' };\n            if (down_res[x].count > 0) {\n                edge.label = '[' + down_res[x].count + ']';\n                edge.animated = true;\n            }\n\n            elements[elements.length] = edge\n        }\n\n        for (var x = 0; x < up_res.length; x++) {\n            var lbl = up_res[x];\n            if (lbl.name != null)\n                lbl = up_res[x].name;\n\n            var splits = lbl.split('.');\n            var project = splits[0];\n            var dataset = '';\n            var col = '';\n            if (splits.length > 1)\n                dataset = splits[1];\n            if (splits.length > 2)\n                col = splits[2];\n\n            elements[elements.length] = {\n                id: 'up_' + x,\n                type: 'customFlowNode',\n                data: { project: project, dataset: dataset, column: col },\n                style: { width: '200px' },\n                sourcePosition: 'right',\n                targetPosition: 'left',\n                position: { x: 0, y: (300 / (up_res.length + 1) * (x + 1)) },\n                draggable: false\n            }\n\n            var edge = { id: '-1-up_' + x, source: 'up_' + x, target: '-1', arrowHeadType: 'arrow' };\n            if (up_res[x].count > 0) {\n                edge.animated = true;\n                edge.label = '[' + up_res[x].count + ']';\n            }\n\n            elements[elements.length] = edge;\n        }\n        var new_state = {}\n        new_state[st] = elements;\n\n        this.setState(new_state)\n    }\n\n    openColumn(col) {\n        this.update('col_elements', col);\n        this.setState({ modalDialog: true, selectedCol: col });\n    };\n\n    closeColumn = () => {\n        this.modalClosed();\n        // this.setState({ showA: true })\n    }\n\n    createColName(col) {\n        return this.props.full_ds_name + '.' + col;\n    }\n\n    formatLineage(lin) {\n        // for (var x = 0; x < lin.length; x++) {\n        //     lin[x] = this.createDsLinkFull(lin[x].split('.')[0], lin[x].split('.')[1])\n        // }\n\n        if (lin != null)\n            return lin.join(\", \");\n\n        return ''\n    }\n\n    modalClosed() {\n        this.update('elements', this.props.deets);\n        this.setState({ modalDialog: false });\n    }\n\n    saveColLineage() {\n        var cols = [this.createColName(this.state.selectedCol.name)]\n        for (var i = 0; i < this.state.selectedCol.lineage_upstream.length; i++) {\n            cols[cols.length] = this.state.selectedCol.lineage_upstream[i]\n        }\n        for (var i = 0; i < this.state.selectedCol.lineage_downstream.length; i++) {\n            cols[cols.length] = this.state.selectedCol.lineage_downstream[i]\n        }\n        this.modalClosed();\n\n        fetch(window.getWebAppBackendUrl('update-col-desc'), {\n            method: 'POST', body: JSON.stringify({\n                'cols': cols,\n                'desc': this.state.selectedCol.comment\n            })\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    eventBus.dispatch(\"dataRefresh\", {});\n                });\n    }\n\n    saveCol() {\n        // alert(this.state.selectedCol.comment)\n\n        for (var x = 0; x < this.props.deets.schema.columns.length; x++) {\n            if (this.props.deets.schema.columns[x].name == this.state.selectedCol.name) {\n                this.props.deets.schema.columns[x].comment = this.state.selectedCol.comment;\n                break;\n            }\n        }\n\n        this.modalClosed();\n\n        fetch(window.getWebAppBackendUrl('update-col-desc'), {\n            method: 'POST', body: JSON.stringify({\n                'cols': [this.createColName(this.state.selectedCol.name)],\n                'desc': this.state.selectedCol.comment,\n                'upstream': false,\n                'downstream': false\n            })\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    eventBus.dispatch(\"dataRefresh\", {});\n                });\n    }\n\n    createDsLink(ds) {\n        return this.createDsLink2(ds.projectKey, ds.name)\n    }\n\n    createDsLink2(proj, ds) {\n        return '/projects/' + proj + '/datasets/' + ds + '/explore/';\n    }\n\n    createDsLinkFull(proj, ds) {\n        return '<a href=\"' + this.createDsLink2(proj, ds) + '\" target=\"_blank\">' + proj + '.' + ds + '</a>';\n    }\n\n    onLoad(rv) {\n        rv.fitView();\n    }\n\n    render() {\n\n        // setTimeout(() => {\n        if (this.props.deets.name != this.state.last_ds) {\n            this.state.last_ds = this.props.deets.name;\n            this.update('elements', this.props.deets);\n        }\n        // }, 500);\n\n        var listItems = this.props.deets.schema.columns.map((col) =>\n            <tr onClick={() => this.openColumn(col)}>\n                <td>{col.name}</td>\n                <td>{col.type}</td>\n                <td>{col.comment}</td>\n            </tr>\n        );\n\n        return (\n            <>\n\n                <Modal size=\"lg\" show={this.state.modalDialog} onHide={this.closeColumn} animation={false}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.selectedCol.name}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Container>\n                            {/* <Row>\n                                <b>Downstream:</b><div>{this.formatLineage(this.state.selectedCol.lineage_downstream)}</div>\n                            </Row>\n                            <Row>\n                                <b>Upstream:</b><div>{this.formatLineage(this.state.selectedCol.lineage_upstream)}</div>\n                            </Row> */}\n                            <Row>\n                                <div style={{ height: 300 }}>\n                                    <ReactFlow onLoad={this.onLoad} elements={this.state.col_elements} nodeTypes={this.nodeTypes}>\n                                        <Controls showInteractive=\"false\" />\n                                    </ReactFlow>\n                                </div>\n                            </Row>\n                            <Row>\n                                <Form style={{ paddingTop: '15px' }}>\n                                    <Form.Group className=\"mb-3\">\n                                        <Form.Label>Description</Form.Label>\n                                        <Form.Control type=\"text\" defaultValue={this.state.selectedCol.comment}\n                                            onChange={e => this.state.selectedCol.comment = e.target.value}\n                                        />\n                                        <Form.Text className=\"text-muted\">\n                                            Will be saved to the DSS Column name\n                                        </Form.Text>\n                                    </Form.Group>\n                                </Form>\n                            </Row>\n                        </Container>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={() => this.saveColLineage()}>Save all Lineage</Button>\n                        <Button variant=\"primary\" onClick={() => this.saveCol()}>Save</Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Container style={{ paddingTop: '20px' }}>\n                    <Row><h2><a href={this.createDsLink(this.props.deets)} target=\"_blank\">{this.props.deets.name} ({this.props.deets.projectKey})</a></h2></Row>\n                    <Row><h4><b>Type:</b> {this.props.deets.type}</h4></Row>\n                    <Row><h4><b>Last Modified:</b> {this.props.deets.versionTag.lastModifiedBy.login} @ {this.props.deets.versionTag.lastModifiedOn}</h4></Row>\n                    <Row><h4><b>Short Desc:</b> {this.props.deets.shortDesc}</h4></Row>\n                    <Row>\n                        <Toast show={this.state.showA} delay={3000} autohide animation={false}>\n                            <Toast.Header>\n                                <img\n                                    src=\"holder.js/20x20?text=%20\"\n                                    className=\"rounded me-2\"\n                                    alt=\"\"\n                                />\n                                <strong className=\"me-auto\">Bootstrap</strong>\n                                <small>11 mins ago</small>\n                            </Toast.Header>\n                            <Toast.Body>Woohoo, you're reading this text in a Toast!</Toast.Body>\n                        </Toast>\n                    </Row>\n                    <Row style={{ paddingTop: '20px' }}>\n                        <Tabs defaultActiveKey=\"lineage\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\n                            <Tab eventKey=\"lineage\" title=\"Lineage\">\n                                <Row>\n                                    <div style={{ height: 300 }}>\n                                        {this.state.elements && <ReactFlow onLoad={this.onLoad} elements={this.state.elements} nodeTypes={this.nodeTypes}>\n                                            <Controls showInteractive=\"false\" />\n                                        </ReactFlow>}\n                                    </div>\n                                </Row>\n                            </Tab>\n                            <Tab eventKey=\"columns\" title=\"Columns\" def>\n                                <Table striped bordered hover>\n                                    <thead>\n                                        <tr>\n                                            <th>Name</th>\n                                            <th>Type</th>\n                                            <th>Description</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {listItems}\n                                    </tbody>\n                                </Table>\n                            </Tab>\n                        </Tabs>\n                    </Row>\n                </Container>\n\n            </>\n        );\n    }\n}\n\n\nexport default Dataset;","import React, { Fragment } from \"react\";\nimport { Component } from 'react';\nimport { useEffect } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport eventBus from \"./eventBus\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Routes,\n    Link\n} from \"react-router-dom\";\nimport Dataset from './components/dataset.js';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            rendered: false,\n            dataiku: undefined,\n            isLoaded: false,\n            project_list: [],\n            full_ds_name: '',\n            full_tree: {},\n            selectedDataset: null\n        };\n\n        this.project_list = []\n\n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick = () => {\n        console.log('The link was clicked.');\n\n        window.$.getJSON(window.getWebAppBackendUrl('initialize'), function (data) {\n            const output = window.$('<pre />').text('Backend reply: ' + JSON.stringify(data));\n            window.$('body').append(output)\n        });\n\n    }\n\n    findDataset = (key) => {\n        var proj = key.split('.')[0];\n        var ds_name = key.split('.')[1];\n\n        // var p_ref = tree[proj];\n        console.log(ds_name);\n\n        // return p_ref.datasets.find(({ name }) => name === ds_name);\n\n        // this.setState({\n        //     selectedDataset: this.findDataset(full_tree, selected[0].id),\n        //     full_ds_name: selected[0].id\n        // })\n    }\n\n    refreshData = () => {\n        fetch(window.getWebAppBackendUrl('get-projects'))\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    var p_list = []\n                    Object.keys(result).forEach(function (proj_name) {\n                        for (var x = 0; x < result[proj_name].datasets.length; x++) {\n                            var ds = result[proj_name].datasets[x];\n                            p_list[p_list.length] = { id: proj_name + '.' + ds.name, label: ds.name + ' (' + proj_name + ')' };\n                        }\n                    });\n\n                    this.setState({\n                        isLoaded: true,\n                        project_list: p_list,\n                        full_tree: result\n                    });\n                });\n    }\n\n    componentDidMount() {\n        window.$(document).ready(() => {\n            this.setState({ dataiku: window.dataiku });\n            this.setState({ rendered: true });\n\n            eventBus.on(\"dataRefresh\", (data) =>\n                this.refreshData()\n            );\n\n            this.refreshData()\n        }\n\n        );\n    }\n\n    render() {\n        //        <Router>\n        //     <main>\n        //       <nav>\n        //         <ul>\n        //           <li><Link to=\"/\">Home</Link></li>\n        //           <li><a href=\"/about\">About</a></li>\n        //           <li><a href=\"/contact\">Contact</a></li>\n        //         </ul>\n        //       </nav>\n        //             <Routes>\n        //   <Route path=\"/\" exact component={Home} />\n        //             </Routes>\n        //     </main>\n        // </Router>\n        // )\n        const { isLoaded, project_list, full_tree, showDetail, selectedDataset, full_ds_name } = this.state;\n        const ref = React.createRef();\n\n        if (!isLoaded) {\n            return <div>Scanning DSS...</div>;\n        } else {\n            if (selectedDataset == null) {\n                return (\n                    <Container style={{ paddingTop: '20px' }}>\n                        <Row>\n                            <Typeahead\n                                ref={ref}\n                                placeholder='Search for Dataset'\n                                onChange={(selected) => {\n                                    if (selected.length > 0) {\n                                        this.findDataset(selected[0].id)\n                                        ref.current.clear()\n                                    };\n                                }}\n                                options={project_list}\n                            />\n                        </Row>\n                    </Container>\n                );\n            }\n            else {\n                return (\n                    <Container style={{ paddingTop: '20px' }}>\n                        <Row>\n                            <Typeahead\n                                ref={ref}\n                                placeholder='Search for Dataset'\n                                onChange={(selected) => {\n                                    if (selected.length > 0) {\n                                        this.findDataset()\n                                        ref.current.clear()\n                                    };\n                                }}\n                                options={project_list}\n                            />\n                        </Row>\n                        <Row>\n                            <Dataset deets={selectedDataset} full_ds_name={full_ds_name}></Dataset>\n                        </Row>\n                    </Container>\n                );\n            }\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  // <BrowserRouter>\n  //   <Route path=\"/\" element={<App />}>\n  //     <Route path=\"expenses\" element={<Expenses />} />\n  //     {/* <Route path=\"invoices\" element={<Invoices />} /> */}\n  //   </Route>\n  // </BrowserRouter>,\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}