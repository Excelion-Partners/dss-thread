{"version":3,"sources":["components/customFlowNode.js","logo.svg","App.js","serviceWorker.js","index.js","eventBus.js","components/dataset.js"],"names":["memo","data","isConnectable","type","position","style","background","border","borderRadius","textAlign","padding","fontWeight","project","href","onClick","e","preventDefault","eventBus","dispatch","dataset","column","module","exports","App","props","findDataset","key","proj","split","ds_name","console","log","ds","state","full_tree","find","element","name","setState","selectedDataset","full_ds_name","refreshData","fetch","window","getWebAppBackendUrl","then","res","json","result","p_list","Object","keys","forEach","proj_name","x","datasets","length","id","label","isLoaded","project_list","rendered","dataiku","undefined","$","document","ready","on","this","showDetail","ref","React","createRef","Container","paddingTop","Row","placeholder","onChange","selected","current","clear","options","deets","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message","event","callback","addEventListener","detail","dispatchEvent","CustomEvent","remove","removeEventListener","Dataset","traverse","lst","node","prop","ct","update","st","base_elem","elements","y","width","borderColor","borderWidth","sourcePosition","targetPosition","draggable","down_res","lineage_downstream","lineage_downstream_full","eval","up_res","lineage_upstream","lineage_upstream_full","lbl","splits","col","edge","source","target","arrowHeadType","count","animated","new_state","closeColumn","modalClosed","modalDialog","selectedCol","comment","col_elements","last_ds","showA","nodeTypes","customFlowNode","method","body","JSON","stringify","createColName","downs","ups","lin","join","cols","i","schema","columns","createDsLink2","projectKey","rv","fitView","listItems","map","openColumn","size","show","onHide","animation","Header","closeButton","Title","Body","height","onLoad","showInteractive","Group","className","Label","Control","defaultValue","value","Text","Footer","variant","saveColLineage","saveCol","createDsLink","versionTag","lastModifiedBy","login","lastModifiedOn","shortDesc","delay","autohide","src","alt","defaultActiveKey","eventKey","title","def","striped","bordered","hover"],"mappings":"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","file":"static/js/main.3f62f83f.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport eventBus from \"../eventBus\";\n\nimport { Handle } from 'react-flow-renderer';\n\nexport default memo(({ data, isConnectable }) => {\n\n  function createDsLink2(proj, ds) {\n    return '/projects/' + proj + '/datasets/' + ds + '/explore/';\n  }\n\n  function selectDataset(e) {\n    e.preventDefault();\n    eventBus.dispatch(\"datasetSelected\", data.project + '.' + data.dataset);\n  }\n\n  return (\n    <>\n      <Handle\n        type=\"target\"\n        position=\"left\"\n        style={{ background: '#555' }}\n        isConnectable={isConnectable}\n      />\n      <div style={{ border: 'solid 1px #333', borderRadius: '3px', textAlign: 'center', padding: '10px' }}>\n        <div style={{ fontWeight: 'bold' }}>{data.project}</div>\n        <div>\n          {/* <a href={createDsLink2(data.project, data.dataset)} target=\"_blank\">{data.dataset}</a> */}\n          <a href='javascript:void(0)' onClick={selectDataset}>{data.dataset}</a>\n        </div>\n        <div>\n          {data.column}\n        </div>\n      </div>\n\n      <Handle\n        type=\"source\"\n        position=\"right\"\n        isConnectable={isConnectable}\n      />\n      {/* <Handle\n        type=\"source\"\n        position=\"right\"\n        id=\"b\"\n        style={{ bottom: 10, top: 'auto', background: '#555' }}\n        isConnectable={isConnectable}\n      /> */}\n    </>\n  );\n});","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Fragment } from \"react\";\nimport { Component } from 'react';\nimport { useEffect } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport eventBus from \"./eventBus\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Routes,\n    Link\n} from \"react-router-dom\";\nimport Dataset from './components/dataset.js';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            rendered: false,\n            dataiku: undefined,\n            isLoaded: false,\n            project_list: [],\n            full_ds_name: '',\n            full_tree: {},\n            selectedDataset: null\n        };\n\n        this.project_list = []\n\n        // This binding is necessary to make `this` work in the callback\n        // this.handleClick = this.handleClick.bind(this);\n    }\n\n    // handleClick = () => {\n    //     console.log('The link was clicked.');\n\n    //     window.$.getJSON(window.getWebAppBackendUrl('initialize'), function (data) {\n    //         const output = window.$('<pre />').text('Backend reply: ' + JSON.stringify(data));\n    //         window.$('body').append(output)\n    //     });\n\n    // }\n\n    findDataset = (key) => {\n        var proj = key.split('.')[0];\n        var ds_name = key.split('.')[1];\n\n        // var p_ref = tree[proj];\n        console.log(ds_name);\n\n        var ds = this.state.full_tree[proj]['datasets'].find(element => element.name == ds_name);\n\n        this.setState({\n            selectedDataset: ds,\n            full_ds_name: ds_name\n        })\n\n        // fetch(window.getWebAppBackendUrl('dataset-details'), {\n        //     method: 'POST', body: JSON.stringify({\n        //         'dataset-name': ds_name,\n        //         'project': proj\n        //     })\n        // })\n        //     .then(res => res.json())\n        //     .then(\n        //         (result) => {\n        //             this.setState({\n        // selectedDataset: result.dataset,\n                //         full_ds_name: result.dataset_name\n                //     })\n                // });\n\n        // return p_ref.datasets.find(({ name }) => name === ds_name);\n\n        // this.setState({\n        //     selectedDataset: this.findDataset(full_tree, selected[0].id),\n        //     full_ds_name: selected[0].id\n        // })\n    }\n\n    refreshData = () => {\n        fetch(window.getWebAppBackendUrl('get-projects'))\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    var p_list = []\n                    Object.keys(result).forEach(function (proj_name) {\n                        for (var x = 0; x < result[proj_name].datasets.length; x++) {\n                            var ds = result[proj_name].datasets[x];\n                            p_list[p_list.length] = { id: proj_name + '.' + ds.name, label: ds.name + ' (' + proj_name + ')' };\n                        }\n                    });\n\n                    this.setState({\n                        isLoaded: true,\n                        project_list: p_list,\n                        full_tree: result\n                    });\n                });\n    }\n\n    componentDidMount() {\n        window.$(document).ready(() => {\n            this.setState({ dataiku: window.dataiku });\n            this.setState({ rendered: true });\n\n            eventBus.on(\"dataRefresh\", (data) =>\n                this.refreshData()\n            );\n\n            eventBus.on(\"datasetSelected\", (ds) =>\n                this.findDataset(ds)\n            );\n\n            this.refreshData()\n        }\n\n        );\n    }\n\n    render() {\n        //        <Router>\n        //     <main>\n        //       <nav>\n        //         <ul>\n        //           <li><Link to=\"/\">Home</Link></li>\n        //           <li><a href=\"/about\">About</a></li>\n        //           <li><a href=\"/contact\">Contact</a></li>\n        //         </ul>\n        //       </nav>\n        //             <Routes>\n        //   <Route path=\"/\" exact component={Home} />\n        //             </Routes>\n        //     </main>\n        // </Router>\n        // )\n        const { isLoaded, project_list, full_tree, showDetail, selectedDataset, full_ds_name } = this.state;\n        const ref = React.createRef();\n\n        if (!isLoaded) {\n            return <div>Scanning DSS...</div>;\n        } else {\n            if (selectedDataset == null) {\n                return (\n                    <Container style={{ paddingTop: '20px' }}>\n                        <Row>\n                            <Typeahead\n                                ref={ref}\n                                placeholder='Search for Dataset'\n                                onChange={(selected) => {\n                                    if (selected.length > 0) {\n                                        this.findDataset(selected[0].id)\n                                        ref.current.clear()\n                                    };\n                                }}\n                                options={project_list}\n                            />\n                        </Row>\n                    </Container>\n                );\n            }\n            else {\n                return (\n                    <Container style={{ paddingTop: '20px' }}>\n                        <Row>\n                            <Typeahead\n                                ref={ref}\n                                placeholder='Search for Dataset'\n                                onChange={(selected) => {\n                                    if (selected.length > 0) {\n                                        this.findDataset(selected[0].id)\n                                        ref.current.clear()\n                                    };\n                                }}\n                                options={project_list}\n                            />\n                        </Row>\n                        <Row>\n                            <Dataset deets={selectedDataset} full_ds_name={full_ds_name}></Dataset>\n                        </Row>\n                    </Container>\n                );\n            }\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  // <BrowserRouter>\n  //   <Route path=\"/\" element={<App />}>\n  //     <Route path=\"expenses\" element={<Expenses />} />\n  //     {/* <Route path=\"invoices\" element={<Invoices />} /> */}\n  //   </Route>\n  // </BrowserRouter>,\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const eventBus = {\n    on(event, callback) {\n      document.addEventListener(event, (e) => callback(e.detail));\n    },\n    dispatch(event, data) {\n      document.dispatchEvent(new CustomEvent(event, { detail: data }));\n    },\n    remove(event, callback) {\n      document.removeEventListener(event, callback);\n    },\n  };\n  \n  export default eventBus;","import React, { Component } from \"react\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Table from 'react-bootstrap/Table';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport { Modal, Button, Form, Toast } from \"react-bootstrap\";\nimport eventBus from \"../eventBus\";\nimport ReactFlow, { Controls } from 'react-flow-renderer';\nimport customFlowNode from './customFlowNode.js';\n\n// import EditColumnModal from \"./editColumnModal\";\n\nclass Dataset extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalDialog: false,\n            selectedCol: { name: '', comment: '' },\n            elements: [],\n            col_elements: [],\n            last_ds: '',\n            showA: false\n        };\n\n        // this.toggleModal = this.toggleModal.bind(this);\n        this.nodeTypes = {\n            customFlowNode: customFlowNode,\n        };\n    }\n\n    traverse = (lst, node, prop, ct = 0) => {\n        var res = [];\n        if (node[prop] != null && node[prop].length > 0) {\n            ct = ct + 1;\n            for (var x = 0; x < node[prop].length; x++) {\n                this.traverse(lst, node[prop][x], prop, ct);\n            }\n        }\n        else {\n            lst[lst.length] = {\n                'count': ct - 1,\n                'name': node.name\n            }\n        }\n\n        return res;\n    }\n\n\n    update = (st, base_elem) => {\n\n        var elements = [{\n            id: '-1',\n            // type: 'customFlowNode',\n            data: { label: base_elem.name },\n            position: { x: 250, y: 140 },\n            style: { width: '200px', borderColor: 'red', borderWidth: '2px', fontWeight: 'bold' },\n            sourcePosition: 'right',\n            targetPosition: 'left',\n            draggable: false\n        }];\n\n        // find all the end-nodes\n        var down_res = [];\n        if (base_elem.lineage_downstream != null && base_elem.lineage_downstream != '') {\n            if (base_elem.lineage_downstream_full != null)\n                this.traverse(down_res, base_elem, 'lineage_downstream_full');\n            else\n                down_res = eval(base_elem.lineage_downstream);\n        }\n\n        var up_res = [];\n        if (base_elem.lineage_upstream != null && base_elem.lineage_upstream != '') {\n            if (base_elem.lineage_upstream_full != null)\n                this.traverse(up_res, base_elem, 'lineage_upstream_full');\n            else\n                up_res = eval(base_elem.lineage_upstream);\n        }\n\n        for (var x = 0; x < down_res.length; x++) {\n            var lbl = down_res[x];\n            if (lbl.name != null)\n                lbl = down_res[x].name;\n\n            var splits = lbl.split('.');\n            var project = splits[0];\n            var dataset = '';\n            var col = '';\n            if (splits.length > 1)\n                dataset = splits[1];\n            if (splits.length > 2)\n                col = splits[2];\n\n            elements[elements.length] = {\n                id: 'down_' + x,\n                type: 'customFlowNode',\n                data: { project: project, dataset: dataset, column: col },\n                style: { width: '200px' },\n                targetPosition: 'left',\n                sourcePosition: 'right',\n                position: { x: 500, y: ((300 / (down_res.length + 1)) * (x + 1)) },\n                draggable: false\n            }\n\n            var edge = { id: '-1-down_' + x, source: '-1', target: 'down_' + x, arrowHeadType: 'arrow' };\n            if (down_res[x].count > 0) {\n                edge.label = '[' + down_res[x].count + ']';\n                edge.animated = true;\n            }\n\n            elements[elements.length] = edge\n        }\n\n        for (var x = 0; x < up_res.length; x++) {\n            var lbl = up_res[x];\n            if (lbl.name != null)\n                lbl = up_res[x].name;\n\n            var splits = lbl.split('.');\n            var project = splits[0];\n            var dataset = '';\n            var col = '';\n            if (splits.length > 1)\n                dataset = splits[1];\n            if (splits.length > 2)\n                col = splits[2];\n\n            elements[elements.length] = {\n                id: 'up_' + x,\n                type: 'customFlowNode',\n                data: { project: project, dataset: dataset, column: col },\n                style: { width: '200px' },\n                sourcePosition: 'right',\n                targetPosition: 'left',\n                position: { x: 0, y: (300 / (up_res.length + 1) * (x + 1)) },\n                draggable: false\n            }\n\n            var edge = { id: '-1-up_' + x, source: 'up_' + x, target: '-1', arrowHeadType: 'arrow' };\n            if (up_res[x].count > 0) {\n                edge.animated = true;\n                edge.label = '[' + up_res[x].count + ']';\n            }\n\n            elements[elements.length] = edge;\n        }\n        var new_state = {}\n        new_state[st] = elements;\n\n        this.setState(new_state)\n    }\n\n    openColumn(col) {\n        // loading the column lineage\n        fetch(window.getWebAppBackendUrl('column-lineage'), {\n            method: 'POST', body: JSON.stringify({\n                'column': this.createColName(col.name)\n            })\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    col.lineage_downstream = result.downs;\n                    col.lineage_upstream = result.ups;\n\n                    this.update('col_elements', col);\n                    this.setState({ modalDialog: true, selectedCol: col });\n                    //eventBus.dispatch(\"dataRefresh\", {});\n                });\n    };\n\n    closeColumn = () => {\n        this.modalClosed();\n        // this.setState({ showA: true })\n    }\n\n    createColName(col) {\n        return this.props.full_ds_name + '.' + col;\n    }\n\n    formatLineage(lin) {\n        // for (var x = 0; x < lin.length; x++) {\n        //     lin[x] = this.createDsLinkFull(lin[x].split('.')[0], lin[x].split('.')[1])\n        // }\n\n        if (lin != null)\n            return lin.join(\", \");\n\n        return ''\n    }\n\n    modalClosed() {\n        this.update('elements', this.props.deets);\n        this.setState({ modalDialog: false });\n    }\n\n    saveColLineage() {\n        var cols = [this.createColName(this.state.selectedCol.name)]\n        for (var i = 0; i < this.state.selectedCol.lineage_upstream.length; i++) {\n            cols[cols.length] = this.state.selectedCol.lineage_upstream[i]\n        }\n        for (var i = 0; i < this.state.selectedCol.lineage_downstream.length; i++) {\n            cols[cols.length] = this.state.selectedCol.lineage_downstream[i]\n        }\n        this.modalClosed();\n\n        fetch(window.getWebAppBackendUrl('update-col-desc'), {\n            method: 'POST', body: JSON.stringify({\n                'cols': cols,\n                'desc': this.state.selectedCol.comment\n            })\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    eventBus.dispatch(\"dataRefresh\", {});\n                });\n    }\n\n    saveCol() {\n        // alert(this.state.selectedCol.comment)\n\n        for (var x = 0; x < this.props.deets.schema.columns.length; x++) {\n            if (this.props.deets.schema.columns[x].name == this.state.selectedCol.name) {\n                this.props.deets.schema.columns[x].comment = this.state.selectedCol.comment;\n                break;\n            }\n        }\n\n        this.modalClosed();\n\n        fetch(window.getWebAppBackendUrl('update-col-desc'), {\n            method: 'POST', body: JSON.stringify({\n                'cols': [this.createColName(this.state.selectedCol.name)],\n                'desc': this.state.selectedCol.comment,\n                'upstream': false,\n                'downstream': false\n            })\n        })\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    eventBus.dispatch(\"dataRefresh\", {});\n                });\n    }\n\n    createDsLink(ds) {\n        return this.createDsLink2(ds.projectKey, ds.name)\n    }\n\n    createDsLink2(proj, ds) {\n        return '/projects/' + proj + '/datasets/' + ds + '/explore/';\n    }\n\n    createDsLinkFull(proj, ds) {\n        return '<a href=\"' + this.createDsLink2(proj, ds) + '\" target=\"_blank\">' + proj + '.' + ds + '</a>';\n    }\n\n    onLoad(rv) {\n        rv.fitView();\n    }\n\n    render() {\n\n        // setTimeout(() => {\n        if (this.props.deets.name != this.state.last_ds) {\n            this.state.last_ds = this.props.deets.name;\n            this.update('elements', this.props.deets);\n        }\n        // }, 500);\n\n        var listItems = this.props.deets.schema.columns.map((col) =>\n            <tr onClick={() => this.openColumn(col)}>\n                <td>{col.name}</td>\n                <td>{col.type}</td>\n                <td>{col.comment}</td>\n            </tr>\n        );\n\n        return (\n            <>\n\n                <Modal size=\"lg\" show={this.state.modalDialog} onHide={this.closeColumn} animation={false}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.selectedCol.name}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Container>\n                            {/* <Row>\n                                <b>Downstream:</b><div>{this.formatLineage(this.state.selectedCol.lineage_downstream)}</div>\n                            </Row>\n                            <Row>\n                                <b>Upstream:</b><div>{this.formatLineage(this.state.selectedCol.lineage_upstream)}</div>\n                            </Row> */}\n                            <Row>\n                                <div style={{ height: 300 }}>\n                                    <ReactFlow onLoad={this.onLoad} elements={this.state.col_elements} nodeTypes={this.nodeTypes}>\n                                        <Controls showInteractive=\"false\" />\n                                    </ReactFlow>\n                                </div>\n                            </Row>\n                            <Row>\n                                <Form style={{ paddingTop: '15px' }}>\n                                    <Form.Group className=\"mb-3\">\n                                        <Form.Label>Description</Form.Label>\n                                        <Form.Control type=\"text\" defaultValue={this.state.selectedCol.comment}\n                                            onChange={e => this.state.selectedCol.comment = e.target.value}\n                                        />\n                                        <Form.Text className=\"text-muted\">\n                                            Will be saved to the DSS Column name\n                                        </Form.Text>\n                                    </Form.Group>\n                                </Form>\n                            </Row>\n                        </Container>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={() => this.saveColLineage()}>Save all Lineage</Button>\n                        <Button variant=\"primary\" onClick={() => this.saveCol()}>Save</Button>\n                    </Modal.Footer>\n                </Modal>\n\n                <Container style={{ paddingTop: '20px' }}>\n                    <Row><h2><a href={this.createDsLink(this.props.deets)} target=\"_blank\">{this.props.deets.name} ({this.props.deets.projectKey})</a></h2></Row>\n                    <Row><h4><b>Type:</b> {this.props.deets.type}</h4></Row>\n                    <Row><h4><b>Last Modified:</b> {this.props.deets.versionTag.lastModifiedBy.login} @ {this.props.deets.versionTag.lastModifiedOn}</h4></Row>\n                    <Row><h4><b>Short Desc:</b> {this.props.deets.shortDesc}</h4></Row>\n                    <Row>{this.props.deets}</Row>\n                    <Row>\n                        <Toast show={this.state.showA} delay={3000} autohide animation={false}>\n                            <Toast.Header>\n                                <img\n                                    src=\"holder.js/20x20?text=%20\"\n                                    className=\"rounded me-2\"\n                                    alt=\"\"\n                                />\n                                <strong className=\"me-auto\">Bootstrap</strong>\n                                <small>11 mins ago</small>\n                            </Toast.Header>\n                            <Toast.Body>Woohoo, you're reading this text in a Toast!</Toast.Body>\n                        </Toast>\n                    </Row>\n                    <Row style={{ paddingTop: '20px' }}>\n                        <Tabs defaultActiveKey=\"lineage\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\n                            <Tab eventKey=\"lineage\" title=\"Lineage\">\n                                <Row>\n                                    <div style={{ height: 300 }}>\n                                        {this.state.elements && <ReactFlow onLoad={this.onLoad} elements={this.state.elements} nodeTypes={this.nodeTypes}>\n                                            <Controls showInteractive=\"false\" />\n                                        </ReactFlow>}\n                                    </div>\n                                </Row>\n                            </Tab>\n                            <Tab eventKey=\"columns\" title=\"Columns\" def>\n                                <Table striped bordered hover>\n                                    <thead>\n                                        <tr>\n                                            <th>Name</th>\n                                            <th>Type</th>\n                                            <th>Description</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {listItems}\n                                    </tbody>\n                                </Table>\n                            </Tab>\n                        </Tabs>\n                    </Row>\n                </Container>\n\n            </>\n        );\n    }\n}\n\n\nexport default Dataset;"],"sourceRoot":""}