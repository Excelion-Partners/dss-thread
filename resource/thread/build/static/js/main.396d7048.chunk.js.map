{"version":3,"sources":["common/common.js","components/dataikuItem.js","App.js","serviceWorker.js","index.js"],"names":["Common","getIconForObjectType","type","DataikuItem","props","state","item","console","log","this","Row","style","paddingTop","Component","App","loadItem","fetch","window","getWebAppBackendUrl","key","method","headers","then","res","json","response","setState","selectedItem","search","query","p_list","Object","keys","forEach","results","length","searchResults","dataiku","undefined","dataikuItem","isLoading","$","document","ready","rendered","option","marginLeft","marginRight","name","Container","filterBy","id","labelKey","minLength","onChange","onSearch","options","placeholder","renderMenuItemChildren","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.396d7048.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { FaColumns, FaDatabase, FaList, FaProjectDiagram, FaQuestionCircle } from \"react-icons/fa\";\n\nfunction getIconForObjectType(type) {\n    // console.log();\n    switch(type) {\n        case \"project\":\n            return <FaProjectDiagram />;\n        case \"dataset\":\n            return <FaDatabase />;\n        case \"column\":\n            return <FaColumns />;\n        case \"definition\":\n            return <FaList />;\n        default: \n            return <FaQuestionCircle />;\n    }   \n}\n\nconst Common = {\n    getIconForObjectType\n};\n\nexport default Common;","import React, { Component } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\nclass DataikuItem extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \n        };\n    }\n\n    // id: \"ADVANCED_CREDITCARDFRAUDAMOSNJUGUN\"\n    // key: \"ADVANCED_CREDITCARDFRAUDAMOSNJUGUN.trans_by_groupID\"\n    // lineage-downstream: \"[]\"\n    // lineage-upstream: \"[{'name': 'ADVANCED_CREDITCARDFRAUDAMOSNJUGUN.transactions_joined_joined', 'lineage_upstream': [{'name': 'ADVANCED_CREDITCARDFRAUDAMOSNJUGUN.merchant_info', 'lineage_upstream': []}, {'name': 'ADVANCED_CREDITCARDFRAUDAMOSNJUGUN.cardholder_info', 'lineage_upstream': []}, {'name': 'ADVANCED_CREDITCARDFRAUDAMOSNJUGUN.transactions_2018_prepared_stacked', 'lineage_upstream': [{'name': 'ADVANCED_CREDITCARDFRAUDAMOSNJUGUN.transactions_2018_prepared', 'lineage_upstream': [{'name': 'ADVANCED_CREDITCARDFRAUDAMOSNJUGUN.transactions_2018', 'lineage_upstream': []}]}, {'name': 'ADVANCED_CREDITCARDFRAUDAMOSNJUGUN.transactions_2017', 'lineage_upstream': []}]}]}]\"\n    // meta:\n    //     checklists:\n    //         checklists: []\n    //     custom:\n    //         kv: {}\n    //     tags: []\n    // name: \"ADVANCED_CREDITCARDFRAUDAMOSNJUGUN.trans_by_groupID\"\n    // project: \"ADVANCED_CREDITCARDFRAUDAMOSNJUGUN\"\n    // schema: Array(5)\n    //     0: {name: 'merchant_id', type: 'string'}\n    //     1: {name: 'merchant_subsector_description', type: 'string'}\n    //     2: {name: 'merchant_latitude', type: 'double'}\n    //     3: {name: 'merchant_longitude', type: 'double'}\n    //     4: {name: 'merchant_state', type: 'string'}\n\n    render() {\n        console.log('render() :: this.props == ');\n        console.log(this.props);\n\n        let item;\n        if (this.props.item != null) {\n            item = <Row>\n                <p>DISPLAY RESULTS OF LOAD ITEM HERE...</p>\n            </Row>\n        } else {\n            item = <Row>\n                <p>No Item to display...</p>\n            </Row>\n        }        \n\n        return (\n            <div style={{ paddingTop: '20px' }}>\n                {item}\n            </div>\n        );\n    }\n}\n\nexport default DataikuItem;","import React, { Fragment } from \"react\";\nimport { Component } from 'react';\nimport { useEffect } from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport {\n    Container,\n    Row\n} from 'react-bootstrap';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Routes,\n    Link\n} from \"react-router-dom\";\n\nimport Common from \"./common/common\";\nimport DataikuItem from \"./components/dataikuItem\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            dataiku: undefined,\n            dataikuItem: null,\n            isLoading: false,\n            selectedItem: null,\n            searchResults: [],\n        }\n    }\n\n    loadItem = (item) => {\n        console.log('loadItem :: item == ');\n        console.log(item);\n\n        const requestOptions = {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n        };\n\n        fetch(window.getWebAppBackendUrl('load-item') + '?key=' + item[0].key, requestOptions)\n            .then(res => res.json())\n            .then((response) => {\n                console.log('response == ');\n                console.log(response);\n                \n                this.setState({\n                    selectedItem: response      \n                });\n            });\n    }\n\n    search = (query) => {\n        const requestOptions = {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n        };\n\n        fetch(window.getWebAppBackendUrl('search') + '?term=' + query, requestOptions)\n            .then(res => res.json())\n            .then((response) => {\n                var p_list = [];\n                Object.keys(response).forEach(function (results) {\n                    p_list[p_list.length] = response[results];\n                });\n\n                this.setState({\n                    searchResults: p_list                        \n                });\n            });\n    }\n\n    componentDidMount() {\n        window.$(document).ready(() => {\n            this.setState({ dataiku: window.dataiku });\n            this.setState({ rendered: true });\n\n            // eventBus.on(\"dataRefresh\", (data) =>\n            //     this.refreshData()\n            // );\n\n            // eventBus.on(\"datasetSelected\", (ds) =>\n            //     this.findDataset(ds)\n            // );\n\n            // this.search('thread');\n            // this.refreshData();\n        });\n    }\n\n    renderMenuItemChildren(option, props) {\n        return <Fragment>\n            {Common.getIconForObjectType(option.type)}\n            <span style={{ marginLeft: '.5rem', marginRight: '.5rem' }}>Type: {option.type}; </span>\n            <span>Name: {option.name}; </span>                                \n        </Fragment>;\n    }\n\n    render() {\n        // <Router>\n        //     <main>\n        //       <nav>\n        //         <ul>\n        //           <li><Link to=\"/\">Home</Link></li>\n        //           <li><a href=\"/about\">About</a></li>\n        //           <li><a href=\"/contact\">Contact</a></li>\n        //         </ul>\n        //       </nav>\n\n        //         <Routes>\n        //             <Route path=\"/\" exact component={Home} />\n        //         </Routes>\n        //     </main>\n        // </Router>\n        \n        const { isLoading, searchResults, selectedItem } = this.state;\n        // const ref = React.createRef();\n        const filterBy = () => true;\n\n        this.dataikuItem = <DataikuItem item={selectedItem} />;\n\n        return (\n            <Container style={{ paddingTop: '20px' }}>\n                <Row>\n                    <AsyncTypeahead\n                        filterBy={filterBy}\n                        id=\"async-search\"\n                        isLoading={isLoading}\n                        labelKey=\"name\"\n                        minLength={3}\n                        onChange={this.loadItem}\n                        onSearch={this.search}\n                        options={searchResults}\n                        placeholder='Search for Datase'                        \n                        renderMenuItemChildren={this.renderMenuItemChildren}\n                    />                    \n                </Row>\n\n                {this.dataikuItem}\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  // <BrowserRouter>\n  //   <Route path=\"/\" element={<App />}>\n  //     <Route path=\"expenses\" element={<Expenses />} />\n  //     {/* <Route path=\"invoices\" element={<Invoices />} /> */}\n  //   </Route>\n  // </BrowserRouter>,\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}