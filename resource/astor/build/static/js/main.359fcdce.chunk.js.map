{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","handleClick","console","log","window","$","getJSON","getWebAppBackendUrl","data","output","text","JSON","stringify","append","state","rendered","dataiku","undefined","isLoaded","project_list","full_tree","bind","document","ready","setState","fetch","then","res","json","result","p_list","Object","keys","forEach","key","length","id","label","href","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,mLCqK5BC,E,kDA/IX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAiBVC,YAAc,WACVC,QAAQC,IAAI,yBAEZC,OAAOC,EAAEC,QAAQF,OAAOG,oBAAoB,eAAe,SAAUC,GACjE,IAAMC,EAASL,OAAOC,EAAE,WAAWK,KAAK,kBAAoBC,KAAKC,UAAUJ,IAC3EJ,OAAOC,EAAE,QAAQQ,OAAOJ,OApB5B,EAAKK,MAAQ,CACTC,UAAU,EACVC,aAASC,EACTC,UAAU,EACVC,aAAc,GACdC,UAAW,IAIf,EAAKD,aAAe,GAGpB,EAAKlB,YAAc,EAAKA,YAAYoB,KAAjB,gBAfJ,E,qDA4BnB,WAAqB,IAAD,OAChBjB,OAAOC,EAAEiB,UAAUC,OAAM,WACrB,EAAKC,SAAS,CAAER,QAASZ,OAAOY,UAChC,EAAKQ,SAAS,CAAET,UAAU,IAG1BU,MAAMrB,OAAOG,oBAAoB,iBAC5BmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,IAAIC,EAAS,GACbC,OAAOC,KAAKH,GAAQI,SAAQ,SAAUC,GAClCJ,EAAOA,EAAOK,QAAU,CAAEC,GAAIF,EAAKG,MAAOH,MAG9C,EAAKV,SAAS,CACVN,UAAU,EACVC,aAAcW,EACdV,UAAWS,Y,oBAenC,WACI,OACA,kBAAC,IAAD,KACA,8BACE,6BACE,4BACE,4BAAI,uBAAGS,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,UAAR,UACJ,4BAAI,uBAAGA,KAAK,YAAR,oB,GAvEAC,aCREC,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAOP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASyB,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAc1B,MACrBG,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.359fcdce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Component } from 'react';\nimport { useEffect } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            rendered: false,\n            dataiku: undefined,\n            isLoaded: false,\n            project_list: [],\n            full_tree: {}\n        };\n\n\n        this.project_list = []\n\n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick = () => {\n        console.log('The link was clicked.');\n\n        window.$.getJSON(window.getWebAppBackendUrl('initialize'), function (data) {\n            const output = window.$('<pre />').text('Backend reply: ' + JSON.stringify(data));\n            window.$('body').append(output)\n        });\n\n    }\n\n    componentDidMount() {\n        window.$(document).ready(() => {\n            this.setState({ dataiku: window.dataiku });\n            this.setState({ rendered: true });\n\n            // my comment\n            fetch(window.getWebAppBackendUrl('get-projects'))\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        var p_list = []\n                        Object.keys(result).forEach(function (key) {\n                            p_list[p_list.length] = { id: key, label: key };\n                        });\n\n                        this.setState({\n                            isLoaded: true,\n                            project_list: p_list,\n                            full_tree: result\n                        });\n                    });\n            // window.$.getJSON(window.getWebAppBackendUrl('get-projects'), function (data) {\n            //     // const output = window.$('<pre />').text('Backend reply: ' + JSON.stringify(data));\n            //     // window.$('body').append(output)\n\n            //     Object.keys(data).forEach(function(key) {\n            //         this.project_list.append(key)\n            //     });\n            // });\n        }\n        );\n    }\n\n    render() {\n        return (\n        <Router>\n        <main>\n          <nav>\n            <ul>\n              <li><a href=\"/\">Home</a></li>\n              <li><a href=\"/about\">About</a></li>\n              <li><a href=\"/contact\">Contact</a></li>\n            </ul>\n          </nav>\n        </main>\n    </Router>\n        )\n        // const { isLoaded, project_list, full_tree } = this.state;\n        // if (!isLoaded) {\n        //     return <div>Loading...</div>;\n        // } else {\n        //     return (\n        //         <div>\n        //             <div>\n        //                 <Typeahead\n        //                     onChange={(selected) => {\n        //                         var d = full_tree[selected[0].id];\n        //                         const output = window.$('<pre />').text(JSON.stringify(d));\n        //                         window.$('body').append(output)\n        //                     }}\n        //                     options={project_list}\n        //                 />\n        //             </div>\n        //             <div>\n        //                 <nav\n        //                     style={{\n        //                         borderBottom: \"solid 1px\",\n        //                         paddingBottom: \"1rem\"\n        //                     }}\n        //                 >\n        //                     <Link to=\"/invoices\">Invoices</Link> |{\" \"}\n        //                     <Link to=\"/expenses\">Expenses</Link>\n        //                 </nav>\n        //             </div>\n        //         </div>\n        //         // <ul>\n        //         //   {project_list.map(item => (\n        //         //     <li key={item}>\n        //         //       {item} \n        //         //     </li>\n        //         //   ))}\n        //         // </ul>\n        //     );\n        }\n        // return (\n        //     <div className=\"App\">\n        //         <header className=\"App-header\">\n        //             <h1>ASTOR DATA ROCKS</h1>\n        //             <code onClick={this.handleClick}>Click me!</code>\n\n        //         </header>\n\n        //         <Container fluid>\n        //             <Row>\n        //                 <Col>\n        //                     <Form>\n        //                         <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n        //                             {/* <Form.Label>Email address</Form.Label> */}\n        //                             <Form.Control placeholder=\"Search\" />\n        //                         </Form.Group>\n        //                     </Form>\n\n        //                     <Typeahead\n        //                         onChange={(selected) => {\n        //                             // Handle selections...\n        //                         }}\n        //                         options={this.project_list}\n        //                     />\n        //                 </Col>\n        //             </Row>\n        //         </Container>\n        //     </div>\n        // );\n    // }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  // <BrowserRouter>\n  //   <Route path=\"/\" element={<App />}>\n  //     <Route path=\"expenses\" element={<Expenses />} />\n  //     {/* <Route path=\"invoices\" element={<Invoices />} /> */}\n  //   </Route>\n  // </BrowserRouter>,\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}